import random
import pickle
p2 = [1, 1]
p1 = [1, 1]
brain = input("Continue with previous ai brain(C), or start a new brain(N): ")
if brain == 'N':
    pickle.dump([], open("compwins.dat", "wb"))
    pickle.dump([], open("humanwins.dat", "wb"))
    pickle.dump([], open("winlist.dat", "wb"))
else:
    pass


compwins = pickle.load(open("compwins.dat", "rb"))
humanwins = pickle.load(open("humanwins.dat", "rb"))
winlist = pickle.load(open("winlist.dat", "rb"))
rec = []

def board():
    print("_________________________")
    print(" Player 2 | " + str(p2[0]) + "  " + str(p2[1]) + " | L  R")
    print(" Player 1 | " + str(p1[0]) + "  " + str(p1[1]) + " | L  R")
    print("¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯")
board()

def move1(x1, x2, y1, y2):

    while True:
        moveinp = input("Enter a move (a new left value to bump or LL, LR, RR, RL for attack): ")

        try:
            moveinp = int(moveinp)
            ch = 'B'
            chval = str(moveinp)
        except:

            moveinp = moveinp.upper()

            ch = 'A'
            choice = str(moveinp)


        #ch = input("Player 1, Bump(B) or Attack(A): ")
        board()

        if ch == "B":
            if x1 + x2 == 1:
                print("Invalid move. x1 + x2 is 1")

            else:
                # while True:


                    chcheck = ['0','1','2','3','4','5']
                    #while True:
                    #chval = (input("New left value: "))

                    board()

                    if chval not in chcheck:
                        print("Invalid move.")
                    else:
                        chval = int(chval)

                        def bumpcheck(x1, x2):
                            if [x1, x2] == [0, 1]:
                                return [1]
                            if [x1, x2] == [0, 2]:
                                return [1, 2]
                            if [x1, x2] == [0, 3]:
                                return [1, 2, 3]
                            if [x1, x2] == [0, 4]:
                                return [1, 2, 3, 4]
                            if [x1, x2] == [1, 0]:
                                return [0]
                            if [x1, x2] == [2, 0]:
                                return [1, 0]
                            if [x1, x2] == [3, 0]:
                                return [2, 1, 0]
                            if [x1, x2] == [4, 0]:
                                return [3, 2, 1, 0]
                            if [x1, x2] == [1, 1]:
                                return [0, 2]
                            if [x1, x2] == [1, 2]:
                                return [0, 2, 3]
                            if [x1, x2] == [1, 3]:
                                return [0, 2, 3, 4]
                            if [x1, x2] == [1, 4]:
                                return [2, 3, 4]
                            if [x1, x2] == [2, 1]:
                                return [0, 1, 3]
                            if [x1, x2] == [2, 2]:
                                return [0, 1, 3, 4]
                            if [x1, x2] == [2, 3]:
                                return [1, 3, 4]
                            if [x1, x2] == [2, 4]:
                                return [3, 4]
                            if [x1, x2] == [3, 1]:
                                return [0, 1, 2, 4]
                            if [x1, x2] == [3, 2]:
                                return [1, 2, 4]
                            if [x1, x2] == [3, 3]:
                                return [2, 4]
                            if [x1, x2] == [3, 4]:
                                return [4]
                            if [x1, x2] == [4, 1]:
                                return [1, 2, 3]
                            if [x1, x2] == [4, 2]:
                                return [2, 3]
                            if [x1, x2] == [4, 3]:
                                return [3]
                        bumpsp = bumpcheck(x1, x2)


                        if chval < 0 or chval > 4 or chval > x1 + x2 or chval == x1 or (chval not in bumpsp):
                            print("Invalid move.")


                        else:
                            x2 = (x1 + x2 - chval) % 5
                            x1 = chval % 5
                            return x1, x2, y1, y2




        elif ch == "A":
            #while True:
            #choice = list(input("Player 1, Choose Move (LL, LR, RR, RL): "))
            #board()

            try:
                ch = choice[0]
            except:
                print("Invalid move.")


            # ch = (input("Attack with left hand(L) or with right hand(R): "))
            if x1 > 0 and ch == "L":
                ch2 = choice[1]
                if ch2 == "L" and y1 != 0:
                    y1 = (y1 + x1) % 5
                    board()

                    return x1, x2, y1, y2

                elif ch2 == "R" and y2 != 0:
                    y2 = (y2 + x1) % 5
                    board()

                    return x1, x2, y1, y2

                else:
                    print("Invalid move.")

            elif x2 > 0 and ch == "R":
                ch2 = choice[1]

                if ch2 == "L" and y1 != 0:
                    y1 = (y1 + x2) % 5
                    board()

                    return x1, x2, y1, y2

                elif ch2 == "R" and y2 != 0:
                    y2 = (y2 + x2) % 5
                    board()
                    return x1, x2, y1, y2

                else:
                    print("Invalid move.")

            else:
                print("Invalid move.")



def trainermove(x1, x2, y1, y2):
    def LL(x1, x2, y1, y2):
        if x1 != 0 and y1 != 0:
            x1 = (x1 + y1) % 5
            return x1, x2, y1, y2
        else:
            return "-"
    def LR(x1, x2, y1, y2):
        if x2 != 0 and y1 != 0:
            x2 = (x2 + y1) % 5
            return x1, x2, y1, y2
        else:
            return "-"
    def RR(x1, x2, y1, y2):
        if x2 != 0 and y2 != 0:
            x2 = (x2 + y2) % 5
            return x1, x2, y1, y2
        else:
            return "-"
    def RL(x1, x2, y1, y2):
        if x1 != 0 and y2 != 0:
            x1 = (x1 + y2) % 5
            return x1, x2, y1, y2
        else:
            return "-"
    def bump(x1, x2, y1, y2, ch):

        y2 = (y1 + y2 - ch) % 5
        y1 = ch % 5
        return x1, x2, y1, y2

    def alltrainermoves(x1, x2, y1, y2):
        moves = [LL(x1, x2, y1, y2), LR(x1, x2, y1, y2), RR(x1, x2, y1, y2), RL(x1, x2, y1, y2)]
        bumps = [0, 1, 2, 3, 4]
        bumpsuse = [0, 1, 2, 3, 4]
        bumpsuse.remove(y1)
        bumpsok = []
        if (y1 + y2) >= 5:
            bumpsok = bumpsuse[(bumps[((y1 + y2) % 5) + 1]):]
            for x in range(len(bumpsok)):
                if (y1 + y2) % 5 != 0:
                    bumpsuse.remove(x)
        for i in bumpsuse:
            if i > (y1 + y2):
                pass
            else:
                bumpsok += str(i)
        bumpsok = list(map(int, bumpsok))
        # add full value switch zero prevention under here
        seen = {}
        dupes = []
        for x in bumpsok:
            if x not in seen:
                seen[x] = 1
            else:
                if seen[x] == 1:
                    dupes.append(x)
                seen[x] += 1
        if dupes:
            for c in range(len(dupes)):
                bump1 = bump(x1, x2, y1, y2, dupes[c])
                moves.append(bump1)
            moves = [elem for elem in moves if elem != "-"]
            moves = list(dict.fromkeys(moves))
            return moves
        else:
            for c in range(len(bumpsok)):
                bump2 = bump(x1, x2, y1, y2, bumpsok[c])
                moves.append(bump2)
                moves = [elem for elem in moves if elem != "-"]
                moves = list(dict.fromkeys(moves))
            return moves
    moves = alltrainermoves(1, 1, 1, 1)
    chosen = random.randint(0, len(moves) - 1)
    chosen = moves[chosen]
    return chosen

def LL(x1, x2, y1, y2):
    if x1 != 0 and y1 != 0:
        x1 = (x1 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"
def LR(x1, x2, y1, y2):
    if x2 != 0 and y1 != 0:
        x2 = (x2 + y1) % 5
        return x1, x2, y1, y2
    else:
        return "-"
def RR(x1, x2, y1, y2):
    if x2 != 0 and y2 != 0:
        x2 = (x2 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"
def RL(x1, x2, y1, y2):
    if x1 != 0 and y2 != 0:
        x1 = (x1 + y2) % 5
        return x1, x2, y1, y2
    else:
        return "-"
def bump(x1, x2, y1, y2, ch):

    y2 = (y1 + y2 - ch) % 5
    y1 = ch % 5
    return x1, x2, y1, y2

def wincheck(x1, x2, y1, y2):
    if (x1 == 0 and x2 == 0):
        return 1
    elif (y1 == 0 and y2 == 0):
        return 2


def allpossiblemoves(x1, x2, y1, y2):
    moves = [LL(x1, x2, y1, y2), LR(x1, x2, y1, y2), RR(x1, x2, y1, y2), RL(x1, x2, y1, y2)]
    length = len(moves)
    i = 0
    while (i < length):
        if (moves[i] == '-'):
            moves.remove(moves[i])
            length = length - 1
            continue
        i = i + 1


    bumps = [0, 1, 2, 3, 4]
    bumpsuse = [0, 1, 2, 3, 4]
    bumpsuse.remove(y1)
    bumpsok = []
    true = 1
    story1 = y1
    story2 = y2
    while true == 1:

        if (y1 + y2) >= 5:
            bumpsok = bumpsuse[(bumps[((y1 + y2) % 5) + 1]):]
            for x in range(len(bumpsok)):
                if (y1 + y2) % 5 != 0:
                    bumpsuse.remove(x)
        for i in bumpsuse:
            if i > (y1 + y2):
                pass
            else:
                bumpsok += str(i)
        bumpsok = list(map(int, bumpsok))
        print (bumpsok)
        for i in bumpsok:
            if story1 == 0 and story2 == 1:
                if i == 1:
                    break
            if story1 == 1 and story2 == 0:
                if i == 0:
                    break

            if story1 == 0 and story2 == i:
                print ("redoinf bump")

            elif story2 == 0 and story2 == i:
                print ("redoingggg")

            else:
                true = 2
        break

    #if bumpsok == [1, 0] or bumpsok == [2, 0] or bumpsok == [3, 0] or bumpsok == [4, 0] or bumpsok == [0, 1] or bumpsok == [0, 2] or bumpsok == [0, 3] or bumpsok == [0, 4]:
       # print("bump is invlaid zero thingy")
       # pass
   # else:
      #  print("bump is not invalid zero tingu")
      #  break





    seen = {}
    dupes = []
    for x in bumpsok:
        if x not in seen:
            seen[x] = 1
        else:
            if seen[x] == 1:
                dupes.append(x)
            seen[x] += 1
    if dupes:

        for c in range(len(dupes)):
            bump1 = bump(x1, x2, y1, y2, dupes[c])

            moves.append(bump1)

        moves = [elem for elem in moves if elem != "-"]
        moves = list(dict.fromkeys(moves))
        moves = moves + moves + moves





        return moves
    else:
        for c in range(len(bumpsok)):
            bump2 = bump(x1, x2, y1, y2, bumpsok[c])
            moves.append(bump2)
            moves = [elem for elem in moves if elem != "-"]
            moves = list(dict.fromkeys(moves))


        moves = moves + moves + moves





        return moves





def reset():
    p1[0] = 1
    p1[1] = 1
    p2[0] = 1
    p2[1] = 1

def compmove(x1, x2, y1, y2):
    pass

def movesmod(mov, compwins, humanwins, win):
    out = [item for t in mov for item in t]
    final = [out[i * 4:(i + 1) * 4] for i in range((len(out) + 3) // 4)]
    try:
        if 'H' in win or 'C' in win:
            for i in compwins:
                for ini in i:
                    if ini in final:
                        print ("compwins is in mov")
                        final.append(ini)
                        final.append(ini)

            for i in humanwins:
                for ini in i:
                    if ini in final:
                        print("humanwins is in mov")
                        final.remove(ini)
            return final
        else:

            return final
    except:
        return mov






def moveloop(rec, winlist, humanwins, compwins):

    while True:

        win = wincheck(p1[0], p1[1], p2[0], p2[1])
        if win == 1:
            print("Computer Won!")
            winlist += 'C'
            print(rec)
            usin = rec.copy()
            compwins.append(usin)

            print("humanwins below")
            print(humanwins)
            print("compwins below")
            print(compwins)
            print(win)
            rec = []
            reset()

        if win == 2:
            print("Human Won! by win = 2")
            winlist += 'H'
            print(rec)
            usin = rec.copy()
            humanwins.append(usin)
            print("humanwins below")
            print(humanwins)
            print("compwins below")
            print(compwins)
            print(winlist)
            rec = []

            reset()

        p1[0], p1[1], p2[0], p2[1] = move1(p1[0], p1[1], p2[0], p2[1])
# ---------------------------------------------------------------------------------------------------------

        try:
            randomc = random.randint(0, len(allpossiblemoves(p1[0], p1[1], p2[0], p2[1])) - 1)
        except:
            pass



        mov = (allpossiblemoves(p1[0], p1[1], p2[0], p2[1]))
        print("humanwins below")
        print(humanwins)
        print("compwins below")
        print(compwins)

        print(mov)
        mov = movesmod(mov, compwins, humanwins, winlist)
        print (mov)
        print(winlist)






        try:
            p1[0], p1[1], p2[0], p2[1] = (mov[randomc][0], mov[randomc][1], mov[randomc][2], mov[randomc][3])
            pstring = (p1[0]), (p1[1]), (p2[0]), (p2[1])
            rec.append(list(pstring))

        except:
            print("Human Won! computer cant move")
            winlist += 'H'

            usin = rec.copy()
            humanwins.append(usin)


            print("humanwins below")
            print (humanwins)
            print("compwins below")
            print(compwins)
            print(winlist)
            reset()

        board()
        pickle.dump(compwins, open("compwins.dat", "wb"))
        pickle.dump(humanwins, open("humanwins.dat", "wb"))
        pickle.dump(winlist, open("winlist.dat", "wb"))
        moveloop(rec, winlist, humanwins, compwins)



#------------------------------------------------------------------------------------------------



def trainloop(rec, winlist, humanwins, compwins, trainerstop):

    while True:

        win = wincheck(p1[0], p1[1], p2[0], p2[1])
        if win == 1:
            print("Computer Won!")
            winlist += 'C'

            usin = rec.copy()
            compwins.append(usin)
            print("humanwins below")
            print(humanwins)
            print("compwins below below")
            print(compwins)
            print("above")
            rec = []
            reset()

        if win == 2:
            print("Trainer Won!")
            winlist += 'H'

            usin = rec.copy()
            humanwins.append(usin)
            print("humanwins below")
            print(humanwins)
            print("compwins below")
            print(compwins)
            rec = []

            reset()
        print(trainermove(p1[0], p1[1], p2[0], p2[1]))
        p1[0], p1[1], p2[0], p2[1] = trainermove(p1[0], p1[1], p2[0], p2[1])
# ---------------------------------------------------------------------------------------------------------


        randomc = random.randint(0, len(allpossiblemoves(p1[0], p1[1], p2[0], p2[1])) - 1)


        mov = (allpossiblemoves(p1[0], p1[1], p2[0], p2[1]))
        print(mov)
        mov = movesmod(mov, compwins, humanwins, win)
        print(mov)

        try:
            p1[0], p1[1], p2[0], p2[1] = (mov[randomc][0], mov[randomc][1], mov[randomc][2], mov[randomc][3])
            pstring = (p1[0]), (p1[1]), (p2[0]), (p2[1])
            rec.append(list(pstring))

        except:
            print("Trainer Won!")
            winlist += 'H'
            print(rec)
            usin = rec.copy()
            humanwins.append(usin)
            print("humanwins below")
            print (humanwins)
            print("compwins below")
            print(compwins)
            reset()

        board()
        if trainerstop >= 10:
            print("Done Training")
            break
        else:
            trainloop(rec, winlist, humanwins, compwins, trainerstop)
        trainerstop += 1

moveloop(rec, winlist, humanwins, compwins)



